"""
Punto de entrada principal para el flujo de trabajo automatizado:
1. Extracci√≥n de datos (scraping)
2. Exclusi√≥n de emails no deseados
3. Enmascarado de datos sensibles
"""

import os
import sys
import time
import logging
import signal
import pandas as pd
import threading
from pathlib import Path
from typing import List, Dict, Any, Optional
import matplotlib.pyplot as plt
from datetime import datetime
from typing import Dict, List, Optional, Set, Tuple
from PIL import Image
import openpyxl
from openpyxl.drawing.image import Image as XLImage

# Configuraci√≥n de logging
from src.core.config import (
    BASE_DIR, LOG_DIR, INPUT_DIR, CLEAN_INPUT_DIR, OUTPUT_DIR,
    EXCLUSION_OUTPUT_DIR, DEMO_OUTPUT_DIR, MAX_WORKERS
)

# Importar m√≥dulo de visualizaci√≥n
from src.core.visualization import crear_grafico_sectores, crear_grafico_estadisticas

# Configurar logging
logging.basicConfig(
    filename=str(LOG_DIR / "proceso_completo.log"),
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("main")

# Variable global para control de interrupci√≥n
interrupcion_solicitada = threading.Event()


def insertar_imagen_en_excel(ruta_excel: str, ruta_imagen: str) -> None:
    """
    Inserta una imagen en un archivo Excel existente.
    
    Args:
        ruta_excel: Ruta al archivo Excel donde insertar la imagen
        ruta_imagen: Ruta a la imagen a insertar
    """
    try:
        # Cargar el libro de Excel existente
        wb = openpyxl.load_workbook(ruta_excel)
        
        # Seleccionar la hoja activa (primera hoja)
        ws = wb.active
        
        # Crear objeto de imagen
        img = XLImage(ruta_imagen)
        
        # Ajustar tama√±o de imagen (opcional)
        img.width = 600  # ancho en p√≠xeles
        img.height = 400  # alto en p√≠xeles
        
        # Insertar imagen en la celda A1
        ws.add_image(img, 'A1')
        
        # Guardar el libro
        wb.save(ruta_excel)
        print(f"‚úÖ Imagen insertada en Excel: {os.path.basename(ruta_excel)}")
    except Exception as e:
        print(f"‚ö†Ô∏è Error al insertar imagen en Excel: {e}")
        logger.error(f"Error al insertar imagen en Excel: {e}")


# Manejador de se√±ales para interrupci√≥n controlada
def signal_handler(sig, frame):
    print("\n‚è∏ Proceso interrumpido. Guardando progreso...")
    interrupcion_solicitada.set()
    # No salir inmediatamente, permitir que el c√≥digo guarde el progreso
signal.signal(signal.SIGINT, signal_handler)

def limpiar_archivos_csv(modo_prueba: bool = False):
    """
    Ejecuta el proceso de limpieza de archivos CSV.
    
    Args:
        modo_prueba: Si se debe ejecutar en modo prueba (limitado)
    
    Returns:
        bool: True si la limpieza fue exitosa, False en caso contrario
    """
    from src.scraping.csv_cleaner import limpiar_csvs_en_carpeta
    from src.core.data_cleaner import limpiar_archivos_en_carpeta
    
    print("üßπ Limpiando archivos CSV...")
    try:
        # Paso 1: Limpieza b√°sica de CSV
        limpiar_csvs_en_carpeta(
            carpeta_inputs=str(INPUT_DIR),
            carpeta_outputs=str(CLEAN_INPUT_DIR)
        )
        print("‚úÖ Limpieza b√°sica de CSV completada")
        
        # Paso 2: Aplicar transformaciones basadas en configuraci√≥n
        print("üìù Aplicando transformaciones seg√∫n configuraci√≥n...")
        archivos_limpios = limpiar_archivos_en_carpeta(
            carpeta=str(CLEAN_INPUT_DIR),
            carpeta_salida=str(CLEAN_INPUT_DIR)  # Sobrescribir archivos limpios
        )
        
        print(f"‚úÖ Transformaciones completadas: {len(archivos_limpios)} archivos procesados")
        return True
    except Exception as e:
        logger.error(f"Error en limpieza de CSV: {e}")
        print(f"‚ùå Error en limpieza de CSV: {e}")
        return False

def procesar_scraping(modo_prueba: bool = False):
    """
    Ejecuta el proceso de scraping de datos.
    
    Returns:
        bool: True si el scraping fue exitoso, False en caso contrario
    """
    from src.scraping.scraper import procesar_archivos_csv
    from src.core.excel.column_editor import procesar_csvs_en_carpeta
    
    print("\nüîç Iniciando proceso de scraping...")
    try:
        archivos_procesados = procesar_archivos_csv(
            carpeta_entrada=str(CLEAN_INPUT_DIR),
            carpeta_salida=str(OUTPUT_DIR),
            max_workers=MAX_WORKERS,
            modo_prueba=modo_prueba
        )
        
        if archivos_procesados:
            print(f"‚úÖ Scraping completado: {len(archivos_procesados)} archivos procesados")
            return True
        else:
            print("‚ö†Ô∏è No se procesaron archivos durante el scraping")
            return False
    except Exception as e:
        logger.error(f"Error en proceso de scraping: {e}")
        print(f"‚ùå Error en proceso de scraping: {e}")
        return False

def procesar_exclusion_emails(modo_prueba: bool = False):
    """
    Ejecuta el proceso de exclusi√≥n de emails no deseados.
    
    Returns:
        bool: True si la exclusi√≥n fue exitosa, False en caso contrario
    """
    from src.exclusion.email_exclusion import (
        cargar_exclusiones, procesar_archivo_exclusion, 
        guardar_hojas, guardar_tabla_como_imagen
    )
    from src.core.excel.generator import generar_excel
    from openpyxl import load_workbook
    from openpyxl.drawing.image import Image as OpenpyxlImage
    import matplotlib.pyplot as plt
    
    print("\nüìß Iniciando proceso de exclusi√≥n de emails...")
    
    try:
        # Cargar exclusiones
        exclusiones = cargar_exclusiones()
        print(f"üìã Cargadas {len(exclusiones)} palabras de exclusi√≥n")
        
        # Verificar archivos a procesar
        archivos = [f for f in os.listdir(OUTPUT_DIR) if f.lower().endswith(".xlsx")]
        if not archivos:
            print("‚ö†Ô∏è No se encontraron archivos Excel para procesar")
            return False
            
        print(f"üîÑ Procesando {len(archivos)} archivos...")
        
        for fn in archivos:
            entrada = os.path.join(OUTPUT_DIR, fn)
            salida = os.path.join(EXCLUSION_OUTPUT_DIR, fn)
            
            print(f"üîÑ Procesando: {fn}")
            
            # Procesar archivo
            if modo_prueba:
                print(f"üß™ Modo prueba activado para exclusi√≥n de emails")
            
            # Asegurarse de que el archivo de entrada tenga todas las columnas necesarias
            try:
                hojas_out, estadisticas = procesar_archivo_exclusion(entrada, exclusiones, modo_prueba=modo_prueba)
                
                # Verificar que las hojas necesarias est√©n presentes
                if "data" not in hojas_out:
                    print("\n‚ö†Ô∏è Advertencia: No se encontr√≥ la hoja 'data' en el resultado")
                if "statistics" not in hojas_out:
                    print("\n‚ö†Ô∏è Advertencia: No se encontr√≥ la hoja 'statistics' en el resultado")
                    # Crear una hoja de estad√≠sticas b√°sica si no existe
                    hojas_out["statistics"] = pd.DataFrame({
                        "Metric": ["Total rows", "Valid emails", "Excluded emails"],
                        "Value": [len(hojas_out.get("data", pd.DataFrame())), 0, 0]
                    })
                    estadisticas = hojas_out["statistics"]
            except Exception as e:
                print(f"\n‚ùå Error al procesar archivo para exclusi√≥n: {e}")
                # Crear hojas b√°sicas para continuar con el proceso
                df_data = pd.read_excel(entrada, sheet_name="data")
                if modo_prueba:
                    df_data = df_data.head(20)
                hojas_out = {
                    "data": df_data,
                    "statistics": pd.DataFrame({
                        "Metric": ["Total rows", "Valid emails", "Excluded emails"],
                        "Value": [len(df_data), 0, 0]
                    })
                }
                estadisticas = hojas_out["statistics"]
            
            # Guardar hojas
            guardar_hojas(hojas_out, salida)
            
            # Generar imagen de tabla de datos
            if "data" in hojas_out:
                # Ordenar data por reviews si existe la columna
                df_data = hojas_out["data"]
                if "reviews" in df_data.columns:
                    df_data["reviews"] = pd.to_numeric(df_data["reviews"], errors="coerce")
                    df_data = df_data.sort_values("reviews", ascending=False)
                    hojas_out["data"] = df_data
                
                data_path = os.path.join(EXCLUSION_OUTPUT_DIR, fn.replace(".xlsx", "_data.jpg"))
                guardar_tabla_como_imagen(
                    df_data.head(20),
                    data_path,
                    title="Data"
                )
                print(f"\nüì∑ Imagen de datos guardada: {os.path.basename(data_path)}")
            
            # Generar imagen de sectores si existe la hoja
            df_sectors = hojas_out.get("sectors")
            if df_sectors is not None:
                # ‚ü™ Columnas que incluyan 'sector'
                sector_cols = [col for col in df_sectors.columns if "sector" in col.lower()]
                # ‚ü´ Columnas que incluyan 'number' o 'count'
                company_cols = [col for col in df_sectors.columns if any(tok in col.lower() for tok in ("number", "count"))]

                # ‚ü¨ Fallback si solo hay dos columnas
                if not sector_cols and len(df_sectors.columns) == 2:
                    sector_cols = [df_sectors.columns[0]]
                    company_cols = [df_sectors.columns[1]]

                if sector_cols and company_cols:
                    df_sector_imagen = df_sectors[[sector_cols[0], company_cols[0]]].copy()
                    df_sector_imagen.columns = ["Sector", "Number of companies"]
                    df_sector_imagen = df_sector_imagen.sort_values("Number of companies", ascending=False)
                    
                    # Generar imagen de tabla de sectores
                    sectors_path = os.path.join(EXCLUSION_OUTPUT_DIR, fn.replace(".xlsx", "_sectors.jpg"))
                    guardar_tabla_como_imagen(
                        df_sector_imagen.head(20),
                        sectors_path,
                        title="Sectors"
                    )
                    print(f"\nüì∑ Imagen de tabla de sectores guardada: {os.path.basename(sectors_path)}")
                else:
                    print("\n‚ö†Ô∏è No se encontraron columnas adecuadas en la hoja 'sectors'")
            else:
                print("\n‚ö†Ô∏è Hoja 'sectors' no encontrada")
            
            # Generar imagen gr√°fica de estad√≠sticas
            try:
                # Usar la funci√≥n especializada para crear el gr√°fico de estad√≠sticas
                graph_path = os.path.join(EXCLUSION_OUTPUT_DIR, fn.replace(".xlsx", "_stats.jpg"))
                
                # Crear gr√°fico con la nueva funci√≥n
                crear_grafico_estadisticas(
                    estadisticas=estadisticas,
                    titulo=f"Statistics Overview - {os.path.basename(fn)}",
                    ruta_salida=graph_path
                )
                
                print(f"\nüì∑ Gr√°fico de estad√≠sticas guardado: {os.path.basename(graph_path)}")
            except Exception as e:
                print(f"\n‚ö†Ô∏è Error al generar gr√°fico de estad√≠sticas: {e}")
            
            # Insertar imagen en Excel
            wb = load_workbook(salida)
            if "statistics" in wb.sheetnames:
                ws = wb["statistics"]
                img = OpenpyxlImage(graph_path)
                ws.add_image(img, 'A10')
                wb.save(salida)
            
            # Generar tabla data
            df_data = hojas_out.get("data")
            if df_data is not None:
                # Ordenar por reviews si existe la columna
                if "reviews" in df_data.columns:
                    df_data["reviews"] = pd.to_numeric(df_data["reviews"], errors="coerce")
                    df_data = df_data.sort_values("reviews", ascending=False)
                
                # Guardar tabla como imagen
                guardar_tabla_como_imagen(
                    df_data.head(20),
                    os.path.join(EXCLUSION_OUTPUT_DIR, fn.replace(".xlsx", "_data.jpg")),
                    title="Data"
                )
            
            # Generar tabla de sectores
            df_sectors = hojas_out.get("sectors")
            if df_sectors is not None:
                # Columnas que incluyan 'sector'
                sector_cols = [col for col in df_sectors.columns if "sector" in col.lower()]
                # Columnas que incluyan 'number' o 'count'
                company_cols = [col for col in df_sectors.columns 
                               if any(tok in col.lower() for tok in ("number", "count"))]
                
                # Fallback si solo hay dos columnas
                if not sector_cols and len(df_sectors.columns) == 2:
                    sector_cols = [df_sectors.columns[0]]
                    company_cols = [df_sectors.columns[1]]
                
                if sector_cols and company_cols:
                    df_sector_imagen = df_sectors[[sector_cols[0], company_cols[0]]].copy()
                    df_sector_imagen.columns = ["Sector", "Number of companies"]
                    df_sector_imagen = df_sector_imagen.sort_values("Number of companies", ascending=False)
                    guardar_tabla_como_imagen(
                        df_sector_imagen,
                        os.path.join(EXCLUSION_OUTPUT_DIR, fn.replace(".xlsx", "_sectors.jpg")),
                        title="Sectors"
                    )
            
            print(f"‚úÖ Guardado ‚Üí {salida}")
        
        print("‚úÖ Proceso de exclusi√≥n de emails completado")
        return True
    
    except Exception as e:
        logger.error(f"Error en proceso de exclusi√≥n de emails: {e}")
        print(f"‚ùå Error en proceso de exclusi√≥n de emails: {e}")
        return False

def procesar_enmascarado(modo_prueba: bool = False):
    """
    Ejecuta el proceso de generaci√≥n de archivos demo.
    
    Returns:
        bool: True si la generaci√≥n de archivos demo fue exitosa, False en caso contrario
    """
    from src.masking.data_masker import mask_file
    
    print("\nüé≠ Iniciando proceso de generaci√≥n de archivos demo...")
    
    try:
        # Verificar archivos a procesar
        archivos = [f for f in os.listdir(EXCLUSION_OUTPUT_DIR) 
                   if f.lower().endswith((".xlsx", ".csv"))]
        
        if not archivos:
            print("‚ö†Ô∏è No se encontraron archivos para generar demos")
            return False
            
        print(f"üîÑ Generando {len(archivos)} archivos demo...")
        
        for fn in archivos:
            entrada = os.path.join(EXCLUSION_OUTPUT_DIR, fn)
            salida = os.path.join(DEMO_OUTPUT_DIR, fn.replace(".xlsx", "_demo.xlsx").replace(".csv", "_demo.csv"))
            
            print(f"üîÑ Generando demo para: {fn}")
            if modo_prueba:
                print(f"üß™ Modo prueba activado para generaci√≥n de demo")
            
            try:
                # Intentar generar el archivo demo
                mask_file(entrada, salida, modo_prueba=modo_prueba)
                print(f"\n‚úÖ Archivo demo generado ‚Üí {os.path.basename(salida)}") 
                # Verificar que el archivo de salida tenga todas las hojas necesarias
                if fn.lower().endswith('.xlsx'):
                    try:
                        # Verificar si el archivo tiene todas las hojas necesarias
                        xls = pd.ExcelFile(salida)
                        if 'data' not in xls.sheet_names:
                            print("\n‚ö†Ô∏è Advertencia: No se encontr√≥ la hoja 'data' en el archivo demo")
                        if 'statistics' not in xls.sheet_names:
                            print("\n‚ö†Ô∏è Advertencia: No se encontr√≥ la hoja 'statistics' en el archivo demo")
                            # Copiar las hojas adicionales del archivo original
                            with pd.ExcelWriter(salida, engine='openpyxl', mode='a') as writer:
                                # Leer hojas del archivo original
                                xls_orig = pd.ExcelFile(entrada)
                                for sheet in xls_orig.sheet_names:
                                    if sheet not in xls.sheet_names and sheet not in ['data']:
                                        df = pd.read_excel(entrada, sheet_name=sheet)
                                        df.to_excel(writer, sheet_name=sheet, index=False)
                    except Exception as e:
                        print(f"\n‚ö†Ô∏è Error al verificar hojas del archivo enmascarado: {e}")
            except Exception as e:
                print(f"\n‚ùå Error al enmascarar archivo: {e}")
                # Copiar el archivo original como respaldo
                import shutil
                shutil.copy(entrada, salida)
            print(f"‚úÖ Guardado ‚Üí {salida}")
        
        print("‚úÖ Proceso de enmascarado completado")
        return True
    
    except Exception as e:
        logger.error(f"Error en proceso de enmascarado: {e}")
        print(f"‚ùå Error en proceso de enmascarado: {e}")
        return False

def ejecutar_flujo_completo(modo_prueba: bool = False):
    """
    Ejecuta el flujo completo de procesamiento de datos.
    
    Args:
        modo_prueba: Si se debe ejecutar en modo prueba (limitado)
    """
    inicio = time.time()
    logger.info("üîÑ Inicio del flujo completo de procesamiento.")
    
    # 1. Limpieza de archivos CSV
    if not limpiar_archivos_csv(modo_prueba):
        return
    
    # 2. Proceso de scraping
    if not procesar_scraping(modo_prueba):
        return
    
    # 3. Proceso de exclusi√≥n de emails
    if not procesar_exclusion_emails(modo_prueba):
        return
    
    # 4. Proceso de generaci√≥n de archivos demo
    if not procesar_enmascarado(modo_prueba):
        return
    
    # Mostrar resumen
    duracion = time.time() - inicio
    logger.info(f"‚úÖ Flujo completo terminado en {duracion:.2f}s.")
    print(f"\n‚úÖ Flujo completo terminado en {duracion:.2f}s.")
    
    return True

def ejecutar_procesamiento_automatico(modo_prueba: bool = False):
    """
    Ejecuta el procesamiento autom√°tico de archivos sin intervenci√≥n manual.
    
    Args:
        modo_prueba: Si se debe ejecutar en modo prueba (limitado)
    """
    inicio = time.time()
    logger.info("üîÑ Inicio del procesamiento autom√°tico.")
    
    # Crear directorios si no existen
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    os.makedirs(EXCLUSION_OUTPUT_DIR, exist_ok=True)
    os.makedirs(DEMO_OUTPUT_DIR, exist_ok=True)
    
    # 1. Buscar archivos en data/outputs/
    archivos = [f for f in os.listdir(OUTPUT_DIR) 
               if f.lower().endswith(('.csv', '.xlsx'))]
    
    if not archivos:
        print("\n‚ö†Ô∏è No se encontraron archivos para procesar en", OUTPUT_DIR)
        return False
    
    print(f"\nüìÇ Encontrados {len(archivos)} archivos para procesar")
    
    # 2. Procesar cada archivo
    for i, archivo in enumerate(archivos, 1):
        print(f"\n[{i}/{len(archivos)}] Procesando: {archivo}")
        
        # Rutas de archivos
        ruta_original = os.path.join(OUTPUT_DIR, archivo)
        ruta_exclusion = os.path.join(EXCLUSION_OUTPUT_DIR, 
                                    archivo.replace('.csv', '.xlsx'))
        ruta_enmascarado = os.path.join(DEMO_OUTPUT_DIR, 
                                      archivo.replace('.csv', '_demo.xlsx')
                                      .replace('.xlsx', '_demo.xlsx'))
        
        # 2.1 Exclusi√≥n de emails
        print(f"\nüìß Aplicando exclusi√≥n de emails a {archivo}...")
        try:
            from src.exclusion.email_exclusion import (
                cargar_exclusiones, procesar_archivo_exclusion, guardar_hojas
            )
            
            # Cargar exclusiones
            exclusiones = cargar_exclusiones()
            print(f"üìã Cargadas {len(exclusiones)} palabras de exclusi√≥n")
            
            # Procesar archivo
            if modo_prueba:
                print(f"üß™ Modo prueba: procesando solo 20 filas")
            
            # Convertir CSV a Excel si es necesario
            if archivo.lower().endswith('.csv'):
                try:
                    df = pd.read_csv(ruta_original)
                    if modo_prueba:
                        df = df.head(20)
                    temp_excel = os.path.join(OUTPUT_DIR, archivo.replace('.csv', '_temp.xlsx'))
                    df.to_excel(temp_excel, sheet_name="data", index=False)
                    ruta_original = temp_excel
                except Exception as e:
                    print(f"\n‚ùå Error al convertir CSV a Excel: {e}")
                    continue
            
            # Procesar exclusi√≥n
            try:
                hojas_out, estadisticas = procesar_archivo_exclusion(
                    ruta_original, exclusiones, modo_prueba=modo_prueba
                )
                
                # Verificar hojas
                if "data" not in hojas_out:
                    print("\n‚ö†Ô∏è No se encontr√≥ la hoja 'data' en el resultado")
                    continue
                    
                # Guardar resultado
                guardar_hojas(hojas_out, ruta_exclusion)
                print(f"\n‚úÖ Exclusi√≥n completada ‚Üí {ruta_exclusion}")
                
            except Exception as e:
                print(f"\n‚ùå Error en exclusi√≥n de emails: {e}")
                continue
                
        except Exception as e:
            print(f"\n‚ùå Error general en exclusi√≥n: {e}")
            continue
            
        # 2.2 Generaci√≥n de archivo demo
        print(f"\nüé≠ Generando archivo demo para {os.path.basename(ruta_exclusion)}...")
        try:
            from src.masking.data_masker import mask_file
            
            if modo_prueba:
                print(f"üß™ Modo prueba: procesando solo 20 filas")
                
            # Generar archivo demo
            mask_file(ruta_exclusion, ruta_enmascarado, modo_prueba=modo_prueba)
            print(f"\n‚úÖ Archivo demo generado ‚Üí {ruta_enmascarado}")
            
        except Exception as e:
            print(f"\n‚ùå Error al generar archivo demo: {e}")
            continue
    
    # Mostrar resumen
    duracion = time.time() - inicio
    print(f"\n\n‚úÖ Procesamiento autom√°tico completado en {duracion:.2f}s")
    print(f"\nüìÇ Resultados:")
    print(f"  - Archivos originales: {OUTPUT_DIR}")
    print(f"  - Archivos con exclusi√≥n: {EXCLUSION_OUTPUT_DIR}")
    print(f"  - Archivos demo: {DEMO_OUTPUT_DIR}")
    
    return True

def main():
    """Funci√≥n principal del script."""
    print("=" * 60)
    print(" WebContactsExtractor - Flujo Automatizado")
    print("=" * 60)
    print("Opciones disponibles:")
    print("1. Flujo completo (scraping ‚Üí exclusi√≥n ‚Üí demo)")
    print("2. Solo procesamiento autom√°tico (exclusi√≥n ‚Üí demo)")
    print("=" * 60)
    
    opcion = input('Elige una opci√≥n (1 o 2): ').strip()
    
    # Selecci√≥n de modo
    print('\n1 - Modo prueba (20 filas)\n2 - Modo completo')
    modo_prueba = input('Elige (1 o 2): ').strip() == '1'
    
    try:
        if opcion == '1':
            # Flujo completo
            ejecutar_flujo_completo(modo_prueba)
        else:
            # Solo procesamiento autom√°tico
            ejecutar_procesamiento_automatico(modo_prueba)
    except KeyboardInterrupt:
        print("\n Proceso cancelado por el usuario.")
        sys.exit(0)

if __name__ == '__main__':
    main()
